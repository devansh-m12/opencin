---
description: Authentication and authorization best practices using Auth.js for secure user management.
alwaysApply: false
---
- Implement proper session management with secure cookie settings.
- Use role-based access control (RBAC) for authorization.
- Implement proper password hashing and salting (handled by Auth.js).
- Use JWT tokens with appropriate expiration times.
- Implement proper logout functionality that invalidates sessions.
- Use environment variables for all authentication secrets and keys.
- Implement proper error handling for authentication failures.
- Use Auth.js providers for OAuth integration when appropriate.
- Implement proper CSRF protection for authentication forms.
- Use secure headers and HTTPS for all authentication endpoints.
- Implement proper rate limiting for authentication attempts.
- Use Auth.js callbacks for custom authentication logic.
- Implement proper user profile management and validation.
- Use Auth.js middleware for protecting routes and API endpoints.
- Implement proper audit logging for authentication events.
